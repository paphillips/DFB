using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using escString = System.String;
using layerList = System.String;
using layerRange = System.String;
using lblString = System.String;

namespace DFBSimulatorWrapper.GraphViz
{
	public class GraphAttributes
	{
		public int Indentation;

		public double? Damping;
		public double? K;
		public escString URL;
		public string _background;
		public Rect bb;
		public KnownColor? bgcolor;
		public bool? center;
		public string charset;
		public ClusterMode? clusterrank;
		public string colorscheme;
		public string comment;
		public bool? compound;
		public bool? concentrate;
		public double? defaultdist;
		public int? dim;
		public int? dimen;
		public bool? diredgeconstraints;
		public double? dpi;
		public double? epsilon;
		public Adddouble esep;
		public KnownColor? fontcolor;
		public string fontname;
		public string fontnames;
		public string fontpath;
		public double? fontsize;
		public bool? forcelabels;
		public int? gradientangle;
		public escString href;
		public escString id;
		public string imagepath;
		public double? inputscale;
		public lblString label;
		public int? label_scheme;
		public string labeljust;
		public string labelloc;
		public bool? landscape;
		public string layerlistsep;
		public layerList layers;
		public layerRange layerselect;
		public string layersep;
		public string layout;
		public int? levels;
		public double? levelsgap;
		public Point lp;
		public double? lheight;
		public double? lwidth;
		public double? margin;
		public int? maxiter;
		public double? mclimit;
		public double? mindist;
		public string mode;
		public string model;
		public bool? mosek;
		public bool? newrank;
		public double? nodesep;
		public bool? nojustify;
		public double? normalize;
		public bool? notranslate;
		public double? nslimit;
		public string ordering;
		public string orientation;
		public OutputMode? outputorder;
		public string overlap;
		public double? overlap_scaling;
		public bool? overlap_shrink;
		public bool? pack;
		public PackMode? packmode;
		public double? pad;
		public double? page;
		public Pagedir? pagedir;
		public QuadType? quadtree;
		public double? quantum;
		public Rankdir? rankdir;
		public double? ranksep;
		public double? ratio;
		public bool? remincross;
		public double? repulsiveforce;
		public double? resolution;
		public string root;
		public int? rotate;
		public double? rotation;
		public double? scale;
		public int? searchsize;
		public Adddouble sep;
		public int? showboxes;
		public double? size;
		public SmoothType? smoothing;
		public int? sortv;
		public Splines? splines;
		public StartType start;
		public Style style;
		public string stylesheet;
		public escString target;
		public bool? truecolor;
		public ViewPort viewport;
		public double? voro_margin;
		public string xdotversion;

		public override string ToString()
		{
			var sb = new StringBuilder();

			sb.Append("[");

			Damping.AppendNameValue(sb, nameof(Damping));
			K.AppendNameValue(sb, nameof(K));
			URL.AppendNameValue(sb, nameof(URL));
			_background.AppendNameValue(sb, nameof(_background));
			bb.AppendNameValue(sb, nameof(bb));
			bgcolor.AppendNameValue(sb, nameof(bgcolor));
			center.AppendNameValue(sb, nameof(center));
			charset.AppendNameValue(sb, nameof(charset));
			clusterrank.AppendNameValue(sb, nameof(clusterrank));
			colorscheme.AppendNameValue(sb, nameof(colorscheme));
			comment.AppendNameValue(sb, nameof(comment));
			compound.AppendNameValue(sb, nameof(compound));
			concentrate.AppendNameValue(sb, nameof(concentrate));
			defaultdist.AppendNameValue(sb, nameof(defaultdist));
			dim.AppendNameValue(sb, nameof(dim));
			dimen.AppendNameValue(sb, nameof(dimen));
			diredgeconstraints.AppendNameValue(sb, nameof(diredgeconstraints));
			dpi.AppendNameValue(sb, nameof(dpi));
			epsilon.AppendNameValue(sb, nameof(epsilon));
			esep.AppendNameValue(sb, nameof(esep));
			fontcolor.AppendNameValue(sb, nameof(fontcolor));
			fontname.AppendNameValue(sb, nameof(fontname));
			fontnames.AppendNameValue(sb, nameof(fontnames));
			fontpath.AppendNameValue(sb, nameof(fontpath));
			fontsize.AppendNameValue(sb, nameof(fontsize));
			forcelabels.AppendNameValue(sb, nameof(forcelabels));
			gradientangle.AppendNameValue(sb, nameof(gradientangle));
			href.AppendNameValue(sb, nameof(href));
			id.AppendNameValue(sb, nameof(id));
			imagepath.AppendNameValue(sb, nameof(imagepath));
			inputscale.AppendNameValue(sb, nameof(inputscale));
			label.AppendNameValue(sb, nameof(label));
			label_scheme.AppendNameValue(sb, nameof(label_scheme));
			labeljust.AppendNameValue(sb, nameof(labeljust));
			labelloc.AppendNameValue(sb, nameof(labelloc));
			landscape.AppendNameValue(sb, nameof(landscape));
			layerlistsep.AppendNameValue(sb, nameof(layerlistsep));
			layers.AppendNameValue(sb, nameof(layers));
			layerselect.AppendNameValue(sb, nameof(layerselect));
			layersep.AppendNameValue(sb, nameof(layersep));
			layout.AppendNameValue(sb, nameof(layout));
			levels.AppendNameValue(sb, nameof(levels));
			levelsgap.AppendNameValue(sb, nameof(levelsgap));
			lp.AppendNameValue(sb, nameof(lp));
			lheight.AppendNameValue(sb, nameof(lheight));
			lwidth.AppendNameValue(sb, nameof(lwidth));
			margin.AppendNameValue(sb, nameof(margin));
			maxiter.AppendNameValue(sb, nameof(maxiter));
			mclimit.AppendNameValue(sb, nameof(mclimit));
			mindist.AppendNameValue(sb, nameof(mindist));
			mode.AppendNameValue(sb, nameof(mode));
			model.AppendNameValue(sb, nameof(model));
			mosek.AppendNameValue(sb, nameof(mosek));
			newrank.AppendNameValue(sb, nameof(newrank));
			nodesep.AppendNameValue(sb, nameof(nodesep));
			nojustify.AppendNameValue(sb, nameof(nojustify));
			normalize.AppendNameValue(sb, nameof(normalize));
			notranslate.AppendNameValue(sb, nameof(notranslate));
			nslimit.AppendNameValue(sb, nameof(nslimit));
			ordering.AppendNameValue(sb, nameof(ordering));
			orientation.AppendNameValue(sb, nameof(orientation));
			outputorder.AppendNameValue(sb, nameof(outputorder));
			overlap.AppendNameValue(sb, nameof(overlap));
			overlap_scaling.AppendNameValue(sb, nameof(overlap_scaling));
			overlap_shrink.AppendNameValue(sb, nameof(overlap_shrink));
			pack.AppendNameValue(sb, nameof(pack));
			packmode.AppendNameValue(sb, nameof(packmode));
			pad.AppendNameValue(sb, nameof(pad));
			page.AppendNameValue(sb, nameof(page));
			pagedir.AppendNameValue(sb, nameof(pagedir));
			quadtree.AppendNameValue(sb, nameof(quadtree));
			quantum.AppendNameValue(sb, nameof(quantum));
			rankdir.AppendNameValue(sb, nameof(rankdir));
			ranksep.AppendNameValue(sb, nameof(ranksep));
			ratio.AppendNameValue(sb, nameof(ratio));
			remincross.AppendNameValue(sb, nameof(remincross));
			repulsiveforce.AppendNameValue(sb, nameof(repulsiveforce));
			resolution.AppendNameValue(sb, nameof(resolution));
			root.AppendNameValue(sb, nameof(root));
			rotate.AppendNameValue(sb, nameof(rotate));
			rotation.AppendNameValue(sb, nameof(rotation));
			scale.AppendNameValue(sb, nameof(scale));
			searchsize.AppendNameValue(sb, nameof(searchsize));
			sep.AppendNameValue(sb, nameof(sep));
			showboxes.AppendNameValue(sb, nameof(showboxes));
			size.AppendNameValue(sb, nameof(size));
			smoothing.AppendNameValue(sb, nameof(smoothing));
			sortv.AppendNameValue(sb, nameof(sortv));
			splines.AppendNameValue(sb, nameof(splines));
			start.AppendNameValue(sb, nameof(start));
			style.AppendNameValue(sb, nameof(style));
			stylesheet.AppendNameValue(sb, nameof(stylesheet));
			target.AppendNameValue(sb, nameof(target));
			truecolor.AppendNameValue(sb, nameof(truecolor));
			viewport.AppendNameValue(sb, nameof(viewport));
			voro_margin.AppendNameValue(sb, nameof(voro_margin));
			xdotversion.AppendNameValue(sb, nameof(xdotversion));

			sb.Append(" ]\n");

			return sb.ToString();
		}
	}
}
